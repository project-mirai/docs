(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{779:function(e,t,v){"use strict";v.r(t);var _=v(109),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"接口适配器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#接口适配器"}},[e._v("#")]),e._v(" 接口适配器")]),e._v(" "),v("p",[e._v("接口适配器是对接 "),v("code",[e._v("mirai-core")]),e._v(" 为其提供网络接口的具体实现.")]),e._v(" "),v("p",[e._v("从 "),v("code",[e._v("mirai-api-http 2")]),e._v(" 版本开始，接口适配器提供更为模块化的网络接口实现. 通过启用不同的适配器可以实现不同的接口调用形式甚至数据格式。")]),e._v(" "),v("h2",{attrs:{id:"内置接口适配器-built-in-adapter"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内置接口适配器-built-in-adapter"}},[e._v("#")]),e._v(" 内置接口适配器 (built-in adapter)")]),e._v(" "),v("p",[v("code",[e._v("mirai-api-http 2")]),e._v(" 内置若干 "),v("code",[e._v("adapter")]),e._v(". 所有 "),v("code",[e._v("built-in adapter")]),e._v(" 采用相同的接口逻辑和数据格式标准, 只在调用形式上有所不同")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("适配器名称")]),e._v(" "),v("th",[e._v("描述")]),e._v(" "),v("th",[e._v("文档")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("http")]),e._v(" "),v("td",[e._v("提供基于轮询的 http 接口")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/mirai-api-http/adapter/HttpAdapter.html"}},[e._v("http")])],1)]),e._v(" "),v("tr",[v("td",[e._v("ws")]),e._v(" "),v("td",[e._v("提供 websocket server 形式的接口")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/mirai-api-http/adapter/WebsocketAdapter.html"}},[e._v("ws")])],1)]),e._v(" "),v("tr",[v("td",[e._v("reverse-ws")]),e._v(" "),v("td",[e._v("提供 websocket client 形式的接口")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/mirai-api-http/adapter/ReverseWebsocketAdapter.html"}},[e._v("reverse-ws")])],1)]),e._v(" "),v("tr",[v("td",[e._v("webhook")]),e._v(" "),v("td",[e._v("通过 http 反向调用形式的接口")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/mirai-api-http/adapter/WebhookAdapter.html"}},[e._v("webhook")])],1)])])]),e._v(" "),v("h2",{attrs:{id:"自定义扩展接口适配器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自定义扩展接口适配器"}},[e._v("#")]),e._v(" 自定义扩展接口适配器")]),e._v(" "),v("p",[e._v("接口适配器支持扩展, 从外部加载, 接口适配器开发详情查看 "),v("RouterLink",{attrs:{to:"/mirai-api-http/adapter/CustomizedAdapter.html"}},[e._v("CustomizedAdapter")])],1),e._v(" "),v("h2",{attrs:{id:"关于-verifykey-session-和-cache"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于-verifykey-session-和-cache"}},[e._v("#")]),e._v(" 关于 verifyKey, session 和 cache")]),e._v(" "),v("p",[v("code",[e._v("verifyKey")]),e._v(", "),v("code",[e._v("session")]),e._v(", "),v("code",[e._v("cache")]),e._v(" 是 "),v("code",[e._v("built-in adapter")]),e._v(" 特有的校验逻辑. 目前只有内置的 "),v("code",[e._v("adapter")]),e._v(" 实现了身份校验("),v("code",[e._v("webhook adapter")]),e._v(" 除外).\n用于校验接口调用者的身份, 以及缓存接口实现过程中的消息缓存和上下文.")]),e._v(" "),v("p",[e._v("对于 "),v("code",[e._v("Customized Adapter")]),e._v(", 没有强制实现这三个标准, 是否提供校验逻辑, 需要阅读具体 "),v("code",[e._v("adapter")]),e._v(" 的使用说明.")]),e._v(" "),v("h2",{attrs:{id:"关于-verifykey-session-和-cache-的作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关于-verifykey-session-和-cache-的作用域"}},[e._v("#")]),e._v(" 关于 verifyKey, session 和 cache 的作用域")]),e._v(" "),v("p",[e._v("对于 "),v("code",[e._v("built-in adapter")]),e._v(" 而言, "),v("code",[e._v("verifyKey")]),e._v(", "),v("code",[e._v("session")]),e._v(", "),v("code",[e._v("cache")]),e._v(" 是全局的. 即, 若开启了多个 "),v("code",[e._v("adapter")]),e._v(" 的情况下,\n多个客户端通过多个 "),v("code",[e._v("adaptor")]),e._v(" 使用同一个 "),v("code",[e._v("session")]),e._v(", 客户端之间的操作会相互影响.")]),e._v(" "),v("p",[e._v("举例:")]),e._v(" "),v("ol",[v("li",[e._v("客户端A, 通过 "),v("code",[e._v("http adapter")]),e._v(" 申请到 "),v("code",[e._v("session1")]),e._v(" 并监听")]),e._v(" "),v("li",[e._v("客户端B, 通过 "),v("code",[e._v("websocket adatper")]),e._v(" 监听 "),v("code",[e._v("session1")])]),e._v(" "),v("li",[e._v("当 "),v("code",[e._v("session1")]),e._v(" 绑定的 "),v("code",[e._v("bot")]),e._v(" 接收到事件时, 客户端A 和 客户端B 都会收到消息推送")]),e._v(" "),v("li",[e._v("客户端A发送消息并取得 "),v("code",[e._v("messageId1")])]),e._v(" "),v("li",[e._v("客户端A 和 客户端B 均可以通过 "),v("code",[e._v("messageId1")]),e._v(" 获取到消息缓存")])]),e._v(" "),v("p",[e._v("总而言之, "),v("code",[e._v("session")]),e._v(" 不在乎是否有多个客户端通过哪种 "),v("code",[e._v("adapter")]),e._v(" 在监听同一个 "),v("code",[e._v("session")]),e._v(", 只要 "),v("code",[e._v("session")]),e._v(" 收取到消息事件，都会无差别地通知客户端.")]),e._v(" "),v("p",[e._v("虽然不建议多个客户端监听同一个 "),v("code",[e._v("session")]),e._v(", 但是在分布式操作上有一定作用")])])}),[],!1,null,null,null);t.default=a.exports}}]);